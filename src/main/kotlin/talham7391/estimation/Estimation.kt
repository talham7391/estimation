/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package talham7391.estimation

import talham7391.estimation.gamedata.Bid
import talham7391.estimation.gamedata.getWinner
import talham7391.estimation.phases.DeclaringTrumpPhase
import talham7391.estimation.phases.FinalBiddingPhase
import talham7391.estimation.phases.InitialBiddingPhase
import talham7391.estimation.phases.TrickTakingPhase


class Estimation(
    private val playerGroup: PlayerGroup
) : GameActions, PlayerInfo {

    private val initialBiddingPhase = InitialBiddingPhase(playerGroup)
    private var declaringTrumpPhase: DeclaringTrumpPhase? = null
    private var finalBiddingPhase: FinalBiddingPhase? = null
    private var trickTakingPhase: TrickTakingPhase? = null

    private var cardsInHand = mutableMapOf<Player, MutableList<Card>>()

    init {
        playerGroup.let {
            it.actions = this
            it.playerInfo = this
        }

        val deck = newDeck().toMutableList()
        val numCards = deck.size
        for (player in playerGroup.players) {
            cardsInHand[player] = deck.randomlyTake(numCards / playerGroup.players.size).toMutableList()
        }
    }

    override fun bid(player: Player, bid: Int) {
        if (!initialBiddingPhase.isPhaseComplete()) {
            initialBiddingPhase.bid(player, bid)
            tryMovingToDeclaringTrumpPhase()
        } else {
            if (finalBiddingPhase == null) {
                throw NotFinalBiddingPhaseYet()
            }
            finalBiddingPhase!!.bid(player, bid)
            tryMovingToTrickTakingPhase()
        }
    }

    override fun pass(player: Player) {
        initialBiddingPhase.pass(player)
        tryMovingToDeclaringTrumpPhase()
    }

    override fun declareTrump(player: Player, suit: Suit) {
        if (declaringTrumpPhase == null) {
            throw NotDeclaringTrumpPhaseYet()
        }
        declaringTrumpPhase!!.declareTrump(player, suit)
        tryMovingToFinalBiddingPhase()
    }

    override fun playCard(player: Player, card: Card) {
        if (trickTakingPhase == null) {
            throw NotTrickTakingPhaseYet()
        }
        trickTakingPhase!!.playCard(player, card)
        tryMovingToNextTrick()
    }

    private fun tryMovingToDeclaringTrumpPhase() {
        if (initialBiddingPhase.isPhaseComplete()) {
            declaringTrumpPhase = DeclaringTrumpPhase(playerGroup, initialBiddingPhase.getWinningBid().player)
        }
    }

    private fun tryMovingToFinalBiddingPhase() {
        if (declaringTrumpPhase!!.isPhaseComplete()) {
            finalBiddingPhase = FinalBiddingPhase(playerGroup, initialBiddingPhase.getWinningBid())
        }
    }

    private fun tryMovingToTrickTakingPhase() {
        if (finalBiddingPhase!!.isPhaseComplete()) {
            trickTakingPhase = TrickTakingPhase(
                playerGroup,
                initialBiddingPhase.getWinningBid().player,
                declaringTrumpPhase!!.getTrumpSuit()
            )
        }
    }

    private fun tryMovingToNextTrick() {
        if (trickTakingPhase!!.isPhaseComplete()) {
            val trick = trickTakingPhase!!.getTrick()
            trickTakingPhase = TrickTakingPhase(
                playerGroup,
                trick.getWinner(),
                trick.trumpSuit
            )
        }
    }

    override fun getCardsInHand(player: Player): List<Card> {
        return cardsInHand[player] ?: throw PlayerNotInGame()
    }

    fun initialBiddingHistory() = initialBiddingPhase.getInitialBiddingHistory()

    fun getPlayerBids(): List<Bid> = finalBiddingPhase?.getFinalBids() ?: emptyList()

    fun getTrumpSuit(): Suit {
        if (declaringTrumpPhase == null) {
            throw TrumpSuitNotAvailable()
        }
        return declaringTrumpPhase!!.getTrumpSuit()
    }
}

class TrumpSuitNotAvailable : Exception()
class NotDeclaringTrumpPhaseYet : Exception()
class NotFinalBiddingPhaseYet : Exception()
class NotTrickTakingPhaseYet : Exception()
class PlayerNotInGame : Exception()
