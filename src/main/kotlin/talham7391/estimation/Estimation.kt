/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package talham7391.estimation

import talham7391.estimation.gamedata.Bid
import talham7391.estimation.gamedata.InitialBid
import talham7391.estimation.gamesteps.FinalBidding
import talham7391.estimation.gamesteps.GameStep
import talham7391.estimation.gamesteps.InitialBidding
import talham7391.estimation.phases.InitialBiddingPhase

class Estimation(
    private val playerGroup: PlayerGroup
) : GameActions {

    private lateinit var initialBiddingPhase: InitialBiddingPhase

    private val turnListeners = mutableListOf<TurnListener>()

    init {
        playerGroup.actions = this
    }

    fun start() {
        initialBiddingPhase = InitialBiddingPhase(playerGroup)
        for (tl in turnListeners) {
            tl.initialBidFor(initialBiddingPhase.getPlayerWithTurn())
        }
    }

    fun addTurnListener(listener: TurnListener) {
        turnListeners.add(listener)
    }

    fun initialBiddingHistory(): Collection<InitialBid> {
        TODO()
    }

    fun finalBiddingHistory(): Collection<Bid> {
        TODO()
    }

    fun cardsInCurrentTrick(): Collection<Card> {
        TODO()
    }

    fun getTrumpSuit(): Suit {
        TODO()
    }

    override fun bid(player: Player, bid: Int) {

    }

    override fun pass(player: Player) {

    }

    override fun declareTrump(player: Player, suit: Suit) {

    }

    override fun playCard(player: Player, card: Card) {

    }
}

fun InitialBidding.transitionToFinalBidding() : GameStep {
    var fb: GameStep = FinalBidding(players, turnOfIndex())
    fb = fb.bid(getWinningBid())
    return fb
}

//fun FinalBidding.transitionToFirstRound() : GameStep {
//    val fr = Round(players, turnOfIndex())
//}

data class PlayerInGame(
    val player: String,
    val cardsInHand: MutableCollection<Card>,
    val score: Int
)

fun createPlayerInGame(player: String): PlayerInGame {
    return PlayerInGame(player, mutableListOf(), 0)
}

data class PlayingOutOfTurn(val player: String) : Exception("The following player is playing out of turn: $player")